file: algemeen.pp
	AlgemeenRecord

file: convert.pp


file: crto.pp
		
Type
  TCharAttr=packed record
    ch   : char;
    attr : byte;
  end;

file: daglijst.pp

file: directory.pp

file: divsubs.pp

file: errors.pp

file: faked.pp

file fakevideo.pp

type
        VideoMemoryRecord = record Case Integer Of
          0:(Ch : Char;
             At : Byte);
          1:(w  : Word);
        End;

type    GpmConnectRecord = record
          eventMask     : word;
          defaultMask   : word;
          minMod        : word;
          maxMod        : word;
          pid           : longint;
          vc            : longint;
        end;

type    GpmEventRecord = record
          buttons,
          modifiers     : byte;
          vc            : word;
          dx,dy,x,y     : integer;
          Gpm_Etype     : longint;
          clicks        : longint;
          Gpm_Margin    : longint;
        end;





file findstreet.pp
type
        streetpointer = record
          x4  : word;
          x4a : char;
          x4b : char;
        end;

file: geolookup

type    posrecord       = packed record
          _R            : Real;     { the number 52.5232323 }
          _C            : longint;  { coded pair Pcod*700+(ord(PcodA)-65)*26+ord(PcodB)-65 }
        end;
type    posmemory       = record
         n              : longint;
         LON            : array[0..Maxn] of posrecord;
         LAT            : array[0..Maxn] of posrecord;
        end;

file: getacro.pp

fiel: hpequals.pp


file: ip.pp

Type    IP_StrucDateAndTime = Record^M
          Year,^M  { Year > 2001 = set time; ongeveer 1* per minuut }
          Month,^M
          Day,^M
          Hour,^M
          Minute,^M
          Second,^M
          Sec100 : Word;^M
          ServerInpByte : Byte;
        End;^M

        IP_StrucPlantStatus = Record
          msg : string[40];
        End;
IP_StrucCityTrackStatus = record {just copy raw message onto network }
         msg : array [1..16] of Byte;
         { transmission of this IP_ message implements csm bytes were/are okay
           byt 1  : $7fh
           byt 15 : csum = 8 bit sum of byte 1..14
           byt 16 : csum = 8 bit XOR of byte 1..14 }
        End;  

        IP_StrucLogData = record
         y,m,d          : word;
         cent           : char;
         len            : word;
         chars          : array[1..30] of Char;
        end;

        IP_StrucAskTaskRecord = Record        {*}
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : Integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer;    {0..9}
        End;

IP_StrucTaskStartRecord = IP_StrucAskTaskRecord;

        WeeglijstStruc = Record
          Naampje : Packed Array [1..20] of char;
          Artikel : Packed Array [1.. 8] Of Char;
          Soort   : Integer;
          Gewicht : LongInt;
          OLDVochtMin,
          OLDVochtMax   : Integer;
        End;

        WeegArray = Array [1..16] OF WeeglijstStruc; {* 16}

        IP_StrucTheTaskRecord = Record
          Main          : IP_StrucAskTaskRecord;      {*}
          DoNotLoad     : byte; {0=load, 1=load&bliep, 2=no load}       {an error in "boodschap"}
          LoadCG        : Byte;
          Boodschap     : Packed Array [1..132] of char;  { was 124 }
{         ReceptNaam    : Packed Array [1.. 20] Of Char;}
          filler        : Packed Array [1.. 12] of char;
          Weeglijst     : WeegArray;
        End;

        IP_StrucBonIdRecord = Record
          BonNummer     : LongInt;
          BonId         : LongInt;    {uniek nummer}
        End;

IP_StrucWeightRecord = Record
          BonId         : LongInt;      {RecIdType}
          Hoeveelheid   : LongInt;      {#####,###}
//        DatumTijd     : LongInt;      {Generated by Dos.PackTime}
(*
  UnpackTime (Weight.DatumTijd,DT);
  Dat := DmyToDate (Dt.Day,Dt.Month,Dt.Year);
  Tim := (Dt.Min + Dt.Hour * 60) * 12 + Dt.Sec Div 5;
*)
          Datum         : Integer;              {*}
          Tijd          : Integer;
          SequenceNumber: LongInt;
          ChargeNummer  : Integer;
          ReceptNummer  : LongInt;
          Artikel       : Packed Array [1.. 8] Of Char;
          Vocht         : Integer;
          Naampje       : Packed Array [1..20] of char;
          Soort         : Integer;
        End;

IP_DataRecord   = record
          IP_Msg        : IP_MesageCode;
          case integer of
          0:(ManyBytes  : Array [0..1023] of byte);
          1:(IP_AskTask : IP_StrucAskTaskRecord);
          2:(IP_TheTask : IP_StrucTheTaskRecord);
          3:(IP_BonId   : IP_StrucBonIdRecord);
          4:(IP_Weight  : IP_StrucWeightRecord);
          5:(IP_Long    : LongInt);
          6:(IP_CityTr  : IP_StrucCityTrackStatus);
          7:(IP_Logdata : IP_StrucLogdata);
          8:(IP_Online  : IP_StrucDateAndTime);
          9:(IP_PlantStatus  : IP_StrucPlantStatus);
        end;
 

file: ipx.pp

Type    IpxStrucDateAndTime = Record
          Year,  { Year > 2001 = set time; ongeveer 1* per minuut }
          Month,
          Day,
          Hour,
          Minute,
          Second,
          Sec100 : Word;
          ServerInpByte : Byte;
        End;

        IpxStrucPlantStatus = Record
          msg : string[40];
        End; 

        IpxStrucCityTrackStatus = record {just copy raw message onto network }
         msg : array [1..16] of Byte;
         { transmission of this IPX message implements csm bytes were/are okay
           byt 1  : $7fh
           byt 15 : csum = 8 bit sum of byte 1..14
           byt 16 : csum = 8 bit XOR of byte 1..14 }
        End;  

        IpxStrucLogData = record
         y,m,d          : word;
         cent           : char;
         len            : word;
         chars          : array[1..30] of Char;
        end;

IpxStrucAskTaskRecord = Record        {*}
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer;    {0..9}
        End;

        IpxStrucTaskStartRecord = IpxStrucAskTaskRecord;

        WeeglijstStruc = Record
          Naampje : Packed Array [1..20] of char;
          Artikel : Packed Array [1.. 8] Of Char;
          Soort   : Integer;
          Gewicht : LongInt;
          OLDVochtMin,
          OLDVochtMax   : Integer;
        End;

        WeegArray = Array [1..16] OF WeeglijstStruc; {* 16}

        IpxStrucTheTaskRecord = Record
          Main          : IpxStrucAskTaskRecord;      {*}
          DoNotLoad     : byte; {0=load, 1=load&bliep, 2=no load}       {an error in "boodschap"}
          Dummy         : Byte;
          Boodschap     : Packed Array [1..124] of char;
          ReceptNaam    : Packed Array [1.. 20] Of Char;
          Weeglijst     : WeegArray;
        End;

 IpxStrucBonIdRecord = Record
          BonNummer     : LongInt;
          BonId         : LongInt;    {uniek nummer}
        End;

        IpxStrucWeightRecord = Record
          BonId         : LongInt;      {RecIdType}
          Hoeveelheid   : LongInt;      {#####,###}
//        DatumTijd     : LongInt;      {Generated by Dos.PackTime}
(*
  UnpackTime (Weight.DatumTijd,DT);
  Dat := DmyToDate (Dt.Day,Dt.Month,Dt.Year);
  Tim := (Dt.Min + Dt.Hour * 60) * 12 + Dt.Sec Div 5;
*)
          Datum         : Integer;              {*}
          Tijd          : Integer;
          SequenceNumber: LongInt;
          ChargeNummer  : Integer;
          ReceptNummer  : LongInt;
          Artikel       : Packed Array [1.. 8] Of Char;
          Vocht         : Integer;
          Naampje       : Packed Array [1..20] of char;
          Soort         : Integer;
        End;
IpxDataRecord   = record
          IpxMsg        : IpxMesageCode;
          case integer of
//        0:(ManyBytes  : Array [0..1023] of byte);
          1:(IpxAskTask : IpxStrucAskTaskRecord);
          2:(IpxTheTask : IpxStrucTheTaskRecord);
          3:(IpxBonId   : IpxStrucBonIdRecord);
          4:(IpxWeight  : IpxStrucWeightRecord);
          5:(IpxLong    : LongInt);
          6:(IpxCityTr  : IpxStrucCityTrackStatus);
          7:(IpxLogdata : IpxStrucLogdata);
          8:(IpxOnline  : IpxStrucDateAndTime);
          9:(IpxPlantStatus  : IpxStrucPlantStatus);
        end;


file: ipxcopy.pp

Type    IpxStrucDateAndTime = Record
          Year,
          Month,
          Day,
          Hour,
          Minute,
          Second,
          Sec100 : Word;
        End;

        IpxStrucAskTaskRecord = Record        {*}
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : Integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer;    {0..9}
        End;

        IpxStrucTaskStartRecord = IpxStrucAskTaskRecord;

        WeeglijstStruc = Record
          Naampje : Packed Array [1..20] of char;
          Artikel : Packed Array [1.. 8] Of Char;
          Soort   : Integer;
          Gewicht : LongInt;
          OLDVochtMin,
          OLDVochtMax   : Integer;
        End;
 WeegArray = Array [1..16] OF WeeglijstStruc; {* 16}

        IpxStrucTheTaskRecord = Record
          Main          : IpxStrucAskTaskRecord;      {*}
          DoNotLoad     : byte; {0=load, 1=load&bliep, 2=no load}       {an error in "boodschap"}
          Dummy         : Byte;
          Boodschap     : Packed Array [1..120] of char;
          ReceptNaam    : Packed Array [1.. 20] Of Char;
          Weeglijst     : WeegArray;
        End;

        IpxStrucBonIdRecord = Record
          BonNummer     : LongInt;
          BonId         : LongInt;    {uniek nummer}
        End;

        IpxStrucWeightRecord = Record
          BonId         : LongInt;      {RecIdType}
          Hoeveelheid   : LongInt;      {#####,###}
//        DatumTijd     : LongInt;      {Generated by Dos.PackTime}
(*
  UnpackTime (Weight.DatumTijd,DT);
  Dat := DmyToDate (Dt.Day,Dt.Month,Dt.Year);
  Tim := (Dt.Min + Dt.Hour * 60) * 12 + Dt.Sec Div 5;
*)
          Datum         : Integer;              {*}
          Tijd          : Integer;
          SequenceNumber: LongInt;
          ChargeNummer  : Integer;
          ReceptNummer  : Integer;
          Artikel       : Packed Array [1.. 8] Of Char;
          Vocht         : Integer;
          Naampje       : Packed Array [1..20] of char;
          Soort         : Integer;
        End;

        IpxDataRecord   = record
          IpxMsg        : IpxMesageCode;
          case integer of
//        0:(ManyBytes  : Array [0..1023] of byte);
          1:(IpxAskTask : IpxStrucAskTaskRecord);
          2:(IpxTheTask : IpxStrucTheTaskRecord);
          3:(IpxBonId   : IpxStrucBonIdRecord);
          4:(IpxWeight  : IpxStrucWeightRecord);
          5:(IpxLong    : LongInt);
        end;


file: ipxold.pp

Type    IpxStrucDateAndTime = Record
          Year,
          Month,
          Day,
          Hour,
          Minute,
          Second,
          Sec100 : Word;
        End;

        IpxStrucAskTaskRecord = Record       {*}
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : Integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer;    {0..9}
        End;

        IpxStrucTaskStartRecord = IpxStrucAskTaskRecord;

        WeeglijstStruc = Record
          Naampje : Packed Array [1..20] of char;
          Artikel : Packed Array [1.. 8] Of Char;
          Soort   : Integer;
          Gewicht : LongInt;
          OLDVochtMin,
          OLDVochtMax   : Integer;
        End;
WeegArray = Array [1..16] OF WeeglijstStruc; {* 16}

        IpxStrucTheTaskRecord = Record
          Main          : IpxStrucAskTaskRecord;     {*}
          DoNotLoad     : byte; {0=load, 1=load&bliep, 2=no load}       {an error in "boodschap"}
          Dummy         : Byte;
          Boodschap     : Packed Array [1..120] of char;
          ReceptNaam    : Packed Array [1.. 20] Of Char;
          Weeglijst     : WeegArray;
        End;

        IpxStrucBonIdRecord = Record
          BonNummer     : LongInt;
          BonId         : LongInt;    {uniek nummer}
        End;

        IpxStrucWeightRecord = Record
          BonId         : LongInt;      {RecIdType}
          Hoeveelheid   : LongInt;      {#####,###}
//        DatumTijd     : LongInt;      {Generated by Dos.PackTime}
(*
  UnpackTime (Weight.DatumTijd,DT);
  Dat := DmyToDate (Dt.Day,Dt.Month,Dt.Year);
  Tim := (Dt.Min + Dt.Hour * 60) * 12 + Dt.Sec Div 5;
*)
          Datum         : Integer;              {*}
          Tijd          : Integer;
          SequenceNumber: LongInt;
          ChargeNummer  : Integer;
          ReceptNummer  : Integer;
          Artikel       : Packed Array [1.. 8] Of Char;
          Vocht         : Integer;
          Naampje       : Packed Array [1..20] of char;
          Soort         : Integer;
        End;

        IpxDataRecord   = record
          IpxMsg        : IpxMesageCode;
          case integer of
//        0:(ManyBytes  : Array [0..1023] of byte);
          1:(IpxAskTask : IpxStrucAskTaskRecord);
          2:(IpxTheTask : IpxStrucTheTaskRecord);
          3:(IpxBonId   : IpxStrucBonIdRecord);
          4:(IpxWeight  : IpxStrucWeightRecord);
          5:(IpxLong    : LongInt);
        end;


file: kieperplanning.pp


file: kubussen.pp

type    KubusAddOnRecord = Record
          ArtikelNamen  : Array [Low(WeeglijstArray)..High(WeeglijstArray)] Of Par30;
          AfgewogenDroog: Array [Low(WeeglijstArray)..High(WeeglijstArray)] Of LongInt;
          ArtikelPerm3,
          ArtikelSpecial: Array [Low(WeeglijstArray)..High(WeeglijstArray)] Of String[10];
          GemetenWCF    : Integer;
        End;


file: laborant.pp

Type    AnalyseAddOnRecordItem = Record
          ZeefNaam      : Par8;
          ZeefEis       : Par8;
          ZeefMin,
          ZeefMax       : Integer;
          ZeefCum       : Array [1..3] Of Integer;      {analyse}
          ZeefAverage   : Integer;                      {analyse}
        End;

        AnalyseAddOnRecord = Record
          TmpZeefItem   : Array [1..MaxZeven] Of AnalyseAddOnRecordItem;
          TotalWeight   : Array [1..3] Of Integer;      {analyse}
          TotalCum      : Array [1..3] Of Integer;      {analyse}
          TotalCumAverage       : Integer;              {analyse}
          VochtPercentage       : Integer;              {analyse}
          TotalMonster          : LongInt;              {analyse}
          TmpGrondstofNaam      : Array [1..4] Of Par30;{mengsel}
          TmpSoort              : SoortMateriaal;       {mengsel}
          TmpZeeflijnNaam       : Par25;
        End;

Type    ToeslagMixAddOnItem = Record
          ZeefOpening   : LongInt;
          ZeefNaam      : Par8;
          ZeefEis       : Par8;
          ZeefMin,
          ZeefMax,
          ZeefAverage   : Integer;
        End;

        KomponentMixItem = Record
          TmpNaam       : Par30;
        End;

        KomponentMixArray = Array [1..4] Of KomponentMixItem;

        ToeslagMixAddOnRecord= Record
          A             : Array [1..MaxZeven] Of ToeslagMixAddOnItem;
          B             : KomponentMixArray;
          TmpZeefLijnNaam : Par25;
          MixSoort      : SoortMateriaal;
          MixSlib,
          MixVolMassa,
          MixVocht      : Integer;
        End;


file: libsubs.pp

file: libtime.pp

file: listedit.pp

Type    ListRecord      = Record
          FileUsed      : FileIdType;
          IndexUsed     : ShortInt;
          LinesUsed     : Integer;
          KeyHome,
          KeyMin,
          KeyMax        : IndexKeyRecord;
          CursorId      : BlockIdType;
          IdArray       : Array [1..25] Of BlockIdType;
          ProcEditPage  : ListProcEditPage;
          ProcDataLine  : EditProcDataLine;
          ProcDefault   : ListProcDefault;
          ProcRemove    : ListProcRemove;
          ReadOnly      : Boolean;
          NoInsert      : Boolean;
          SSkipDouble   : Boolean;      {SPECIFIEK PAR8}
          UseCentrale   : Byte; {0=niet, 1=lab/stort, 2=recepten 3=filterarp}
        End;


file: lptlinux.pp

file: menu2.pp

Type      MenuItemType    = Record
          Next          : PtrMenuItem;
          Proc          : MenuProcType;
          Name          : String;
        End;

        MenuRecord      = Record
          Root          : PtrMenuItem;
          Choice        : Word;
          Page          : PageNameType;
        End;

file: mixstat.pp

type
    RoverRecord         = Record
      sFirstRCV,sLastRcv: integer;
      sLON,sLAT         : real;
      sSpeed            : integer;
      sChaufnum         : integer;
    end;
    mixmemrecord = record
      nr                : array [0..9999] of RoverRecord;
      tableinit         : longint;
      ThereAreChanges   : boolean;
    end;


file: orderaan.pp

Type    StortAddOnRecord = Record
          OmschrijvingRecept    : String[60];
{         OmschrijvingReceptNEN : Par50;}
          OmschrijvingStortwijze: Par20;
{         tHeen                 : integer;
          tTerug                : integer;}
        End;

fiel: ovaannemers.pp

file: ovbesturing.pp

file: ovbonnen.pp

Type    PtrVerbruik     = ^VerbruikRecord;

        VerbruikRecord  = Record
          Next          : PtrVerbruik;
          Code          : Par8;
          Soort         : Byte;
          Nome          : string[19];
          countWD,
          countWN,
          countTD       : Int64;
        End;

Type    LineType        = String[80];
        Line    : Record
          Len   : Byte;
          Zar   : Par8;
          Sp2   : Char;
          Aan   : Packed Array [1..61] Of Char;
          LadA  : Par10;
        End;

Type    MeldType   = (_WC,_VC,_AW,_BL,_EL,_VW,_AC);
        MeldArray  = Array [MeldType] Of Record
          Sum   : LongInt;
          Cnt   : Integer;
        End;

Type    PtrVerbruik     = ^VerbruikRecord;

        VerbruikRecord  = Record
          Next          : PtrVerbruik;
          Code          : Par8;
          Soort         : Byte;
          Nome          : string[19];
          countWD,
          countWN,
          countTD       : Int64;
        End;

file: ovchauffeurs.pp

file: oven206.pp

 DataAr  :      Record
                DatumEerste,
                DatumLaatste: Integer;
                KubusSterkte: Array [0..14] Of Integer;
                KubusDatum  : Array [0..14] of integer;
                KubusNummer : Array [0..14] of Longint;
             End;

file: ovfactuur.pp

file: ovfilter.pp

file: ovgps.pp

file: ovgps_print.pp

type    GeoRecArray = Record
          mem    : Array[1..7999] of GeoRecord;
          n      : integer;
          autox  : integer;
          datumx : integer;
        end; 


file:ovkieperplanning.pp

file: ovkomponenten.pp

file: ovkuben.pp

Type    CalcRecord = Record
          Count : LongInt;
          Sum,
          Sum2  : LongInt;
        End;

DataAr  : Array [0..9] Of Record
                            DatumEerste,
                            DatumLaatste: Integer;
                            KubusSterkte: Array [0..5] Of Integer;
                          End;
file: ovkubenold.pp

file:ovmixers.pp

file: ovrecepten.pp

file: ovslib.pp

file: ovstorten.pp

type    ArtikelType = record case integer of
          0:({Soort     : integer; }artikel   : par8);
          1:({Soort2    : integer; }vergelijk : Qword);
        end;

        par18   = packed array [1..18] of char;

Type    PtrVerbruik     = ^VerbruikRecord;
        VerbruikRecord  = Record
          Next          : PtrVerbruik;
          ArtCode       : ArtikelType;
          Vocht         : integer;
          acount        : Int64;
        End;

file:ovtickets.pp

type
        IetsRecord = record
          tot  : array [0..4] of longint;
          vra  : array [0..4] of longint;
          cds  : par8;
        end;

type
        AfvalRecord = record
          AfvalNummer,
          AfvalTonnage,
          Afvalvracht   : longint;
          DatumFrom,
          DatumTo       : word;
          Debi          : par8;
          naam,woon     : par25;
        end;

file: ovwagenpark.pp

type   WagenRecord = record
        autonr          : integer;
        autosoort       : char;
        autotype        : char;
        autocentrale    : char;
        autokent        : par8;
        trailkent       : par8;
        starttijd       : integer;
        Chauffeurnaam   : string[30];
        chauffeurgsm    : string[15];
        Bedrijfnaam     : string[15];
        Opmerking       : par24;
       end;


file: pdfdrv.pp

Var
    pdf         : File Of byte;
    objectData  : Array [0..MaxObject] Of
                  Record
                     Byteoffset : LongInt;
                     whatobject : objecttype;
                  End;
file: pdfdrvo.pp

file: pgartikel.pp

file: pgen206.pp

file: pgen206o.pp

file: pgevent.pp

file: pglaborant.pp

file: pgmixers.pp

file: pgpcod.pp

file: pgpeople.pp

file: pgpf.pp

file: pgprefab.pp

file: pgweegtot.pp

type    totrecord = record
         _code : par8;
         _oms  : par40;
         _in_t,
         _in_v,
         _uit_t,
         _uit_v : longint;
        end;

file: pgzone.pp

file: plcsubs.pp

file: postcodes.pp

type
    strx        = string[strsize];
    townrecord = packed record
      name    : strx;
      pp4min,
      pp4max  : word;
      hits    : longint;
    end;
    pp6record = packed record  { A..Z,A..Z }
      town     : word;
      street   : longint;
      nummin   : word;
      nummax   : word;
      apnd     : byte;
      isodd    : boolean;
    end;
    pp4record = packed record
      pp6      : array ['A'..'Z','A'..'Z'] of pp6record;
    end;
{      pp4pointer = ^pp4record;         }
    memrecord = record
      towns        : array [1..maxtown] of townrecord;
      streets      : array [1..maxstreet] of strx;
      pp4          : array [1000..9999] of pp4record {pointer };
      tableloaded  : boolean;
    end; 

file: prijzen.pp

file: project.pp

file: prtbon.pp

file: prtgraf.pp

Type    ZeeflijnData    = Array [1..16] Of Record
          Naam          : Par8;
          Opening       : Longint;
          Resten        : Array [1..3] Of Word;
        End;


file: prtlab.pp

type    yrecord = record
          perc_zg : integer;
          adk: byte;
          naam,herkomst : string[60];
          dry,vocht_perc,abs_perc,doseren,vocht_kg,abs_kg,volmassa : longint;
        end;


file: recepten.pp

Type
        ReceptAddOnItem = Record
          ANaam         : Par30;        { --> tekst op afleverbon       }
          AMerk         : Par20;        { --> afdruk BMC                }
{         AOpmerking    : Par20;         --> opmerking op afleverbon       }
          ACode         : Par4;         {-> gebruikt in recept.omschrijving}
          AMix          : MixArray;

          AVolMassa     : Integer;
          ASoort        : SoortMateriaal;
          AValid        : Boolean;      {if false, doet dan niet mee    }

          AZeefWaarde   : Array [1..MaxZeven] Of Integer;
          ANF           : Integer;
          AVolPerc      : Integer;      {V%/% toeslag materiaal         }
          AVocht        : Integer;      {?}{Slib}
          ASlib         : Integer;
          AAbsorptie    : Integer;
          AVasteDelen   : integer;
          APrijsTon     : LongInt;
          Akfactor      : integer;
{         AAbsorptieV   : integer;}
        End;

Type    ReceptAddOnRecord = Record
          AKomponent    : Array [Low(ReceptKomponentArray)
                              ..High(ReceptKomponentArray)] Of ReceptAddOnItem;
          AIndexZ1,
          AIndexZ2,
          AIndexG1,
          AIndexG2      : Integer;

          Zeven         : Array [1..MaxZeven] Of Record
            ZeefNaam    : Par8;
            ZeefEis     : Par8;
            ZeefOpening : LongInt;
            ZeefMin,
            ZeefMax,
            ZeefWaarde  : Integer;
          End;

          LiterToeslag,
          LiterCement,          {= liter fijn cement            }
          LiterHulpstof,
          LiterToevoeging,
          LitersMinder : Integer;       {= liter fijn toevoegingen      }

          FijnSlib,
          FijnToeslag,
          FijnHulpStof,
          FijnTotaal,
          WaterHulpstof         : Integer;

          Zeef1mmBerekend,
          ReceptNF,
          ExtraWaterT,   { = absorptiewater Toeslag }
          ExtraWaterP,   { = absorptiewater Poeder }
          RTotaalWater,
          AanmaakWater,         {water wat bijgedoseerd wordt}
          RTotaalCement,
          RTotaalPoeder,
          Gewogenkfactor : integer;
{         kfactor       : integer;
          kfactorREAL   : real;}

          AWeeglijst    : Array [Low(WeeglijstArray)
                             .. High(WeeglijstArray)] Of Record
            AwNaam      : Par30;
            AwVolMassa  : Integer;              {nodig voor V/V% in kubussen}
            AwNF        : Integer;
            AwAbsorptie : Integer;
            Awkfactor   : integer;
            AwMerk      : Par20;
            AwZeefResten: CumulatiefArray;
{           Case Integer Of
            0: (AwZeefResten: CumulatiefArray);
            1: (AwMerk      : Par20          ); }
          End;
          
          NameVoorschrift       : Par25;
          NameBerekenen         : Par25;
          ReceptOk              : Boolean;
        End;

file: recsubs.pp

file: refresh1s.pp

Type    PtrConnectRecord = ^ConnectRecord;
        ConnectRecord   = Record
          Next  : PtrConnectRecord;
          Proc  : RefreshProcedure;
        End;


file: rijtijden.pp

file: select.pp


file: sort.pp

type    SortRecord      = Record
                            Data : array [1..maxkeysize] of Byte;
                            BId  : BlockIdType;
                          End;

file: sortcopy.pp

Type    SortRecord      = Record
                            Data : array [1..maxkeysize] Of Byte;
                            BId  : BlockIdType;
                          End;

file: teles.pp

file: terminal.pp

file: tfcompil.pp

file: tflib.pp

++++++++++++++++++++

+++++++++++++++++++++++++++++
source files in lima/source/database directory
++++++++++++++++++++++++++++++


file: database.pp

Type    PtrUpdateRecord = ^UpdateRecord;
        UpdateRecord    = Record
          Next          : PtrUpdateRecord;
          Proc          : ProcedureUpdate;
        End;

file: databasecore.pp

file: dbsterminate.pp

file: dbstype.pp

Type    IndexKeyRecord  = Record
          Value         : Array [1..IndexKeyWords] Of Word;
          SeekIndex     : BlockIdType;
{         UpdateCount   : Word;}
        End;

PageItem        = Record
          Key           : IndexKeyRecord;
          PageRef       : BlockIdType;
        End;

Type    PageRecord      = Record Case Integer Of
          0:(ItemsOnPage: Integer;
             BackPageRef: BlockIdType; {ItemArray[0].PageRef}
             ItemArray  : Array [1..MaxItemsPage] of PageItem);
          1:(Data       : DataArray);
        End;

Type    BlockType       = Record
          BlockId       : BlockIdType;
          FileId        : FileIdType;
          Index,
          Changed       : Boolean;
          Data          : PageRecord;   {data}
        End;

 Type   FileParameterRecord = Record
          FileName      : StrFileName;
{!}       FileSizeData,
{!}       FileSizeIndex : LongInt;
          IndexCount    : Integer;      {# of indexen, 0 --> no index file}
          ProcIndex     : SetIndexProc;
          RecordSize    : Integer;
          RecordsInBlock: Integer;
        End;

Type    PtrUpdateRecord = ^UpdateRecord;
        UpdateRecord    = Record
          Next          : PtrUpdateRecord;
          Proc          : ProcedureUpdate;
        End;

Type    OpenFileDesc    = Record
          FileVar       : DataFile;
          FileId        : FileIdType;
          FileIndex     : Boolean;
        End;

type    PtrLockTagRecord = ^LockTagRecord;

        LockTagRecord   = record
          Next  : PtrLockTagRecord;
          TagFId: integer{FileIdType};
          TagRId: BlockIdType;
          timer : Longint;
        end;

file: herindex.pp

Type
  OLDReceptKomponentArray = Array [1..15] Of Record
      RArtikel  : Par8;
      RGewenst  : Integer;
      RExtra    : Integer;      {% bij hulpstoffen en k-factor bij vulstoffen }
  End;

Type  OLDReceptRecord = Packed Record
    UniekNr,SS1,SS2: LongInt;FactByUser : Par8;PinnedCent: Char;Wipe: par3; NewReceptNummer: LongInt;ZeeflijnVoorschrift: Par8;ZeeflijnBerekenen        : Par8;
    DatumBerekening,TijdBerekening: integer; LLDate: Integer; Naam: Par20; XOLDVB: Par30;Metselspecie: Par12;OldHidden  : Char;
    TempTag: Char; MidX: Integer; Sequence: Byte; ValidFromDate,ValidFromTime: Integer;CreatedByUser: par8;int_opm2: Par4; OldChain:char;
    XXMaximaalVliegas: Integer; LLTime: Integer; Kwaliteit: Integer;Consistentie : Integer;spare22: integer;LuchtPercentage: Integer;MinFijn,MaxFijn,
    GewenstFijn : Integer; MaxWCF,GewenstWCF: Integer;ExtraZand : Integer;ZandPerc: Integer;MaxZandPerc: Integer;Zeef1mm: Integer;GrindPerc: Integer;
    TotaalFijn: Integer; BonOpmerking1: Par20;BonCementPrinten  : Char;BonCementPercPrinten: Char; RKomponent: OLDReceptKomponentArray;
    Maakmethode : Integer;Weeglijst: WeeglijstArray;Geleverd: Longint;ELDate,ELTime: integer;BonOpmerking2,BonOpmerking3: Par20;XBonAttestPrinten : Char;               {Attestnummer afdrukken         }
    BonKOMOzwarten: Char;KILLEDUseVBT1995: Char;KILLEDUseEN206: Char; ENfirsttime : char;FactEditDate: Integer;best_maxcharge: Integer;VloeiMin : Integer;
    VloeiMax: Integer;KILLEDXAx: Integer; BasisPrijsArtikelEN : Par8;OmschrijvingEN206  : Par60;KgFact :array [3..6] of LOngint; KILLEDExpiratieDatum: integer;
    AttestNummer: Par20; int_opm1: Par15;Filler2: Array [813..960] Of Byte;best_mengtijd,best_specietemp,best_maxslib,best_maakmeth: integer;Artikels: ArtikelsType;
  End;

Type    PtrPartType     = ^PartType;
        PartType        = Record
                            Next        : PtrPartType;
                            Low,High    : LongInt;
                          End;

ArtikelSchemaRecord = Packed record
    ASdatum     : integer;
    zoneprijs   : array [0..6] of LongInt;
  end;

(*  OLDAannemerRecord = packed record   {Object(RecordHeading)}
    UniekNr,SS1,SS2     : LongInt;
    ZoekArg             : Par8;
    mod_user            : Par8;
    Centrumtoeslag,
    Blokkeren           : Char;         {30}
    Aannemer            : NawRecord;    {105}
    Telefoon,
    Fax                 : Par15;        {135}
    NewDebiteur         : Par10;        {145}
    FPcod               : integer;
    FPcodABC            : Par2;
    WeekendToeslag      : Char;         {160}
    History             : HistoryRecord;{170}
    Contant             : Char;         {171}
    JKswitchdate        : Integer;      {173}
    JaarkoopNEW         : Longint;
    JaarkoopACT         : LongInt;      {181}
    factuur             : NAWrecord;
    alg_email,
    fact_email,
    at_domain           : Par25;
    txtzoom             : OpmerkingArray;
    APcod               : integer;
    APcodABC            : Par2;
    GeleverdJaar,
    GeleverdJaarV,
    GeleverdJaarVV,
    GeleverdJaarVVV     : longint;
    AYear               : Integer;
    OVregime            : Par8;
    AHnum               : Par6;
    mod_date,
    mod_time            : integer;
    Expiratie           : integer;
    ARPverplicht,      
    EFact               : char;
    FHnum               : Par6;
    GSM                 : Par15;
    free_space          : packed array[1..307] of char;
    Particulier         : char;
    WeekFacturen        : char;
    BetalingsTermijn    : byte;
    RecVersion          : byte;
  End; *)



file: herindex.saved.pp

file: rdaclient.pp

file: rdaserver.pp

file: rdatype.pp

Type  RdaDataType     = record case integer of
                            0:(d  : DataArray);
                            1:(stv: StvDataRecord);
                            2:(l  : longint);
                          end;

Type  RdaRecord       = record case integer of
          0: (Key       : RdaKeyRecord);
          1: (KeyData   : RdaKeyDataRecord);
          2: (Data      : RdaDataRecord);
          3: (RId       : RdaRIdRecord);
          4: (RIdRec    : RdaRIdRecRecord);
          5: (RIdData   : RdaRIdDataRecord);
          6: (Base      : RdaBaseRecord);
        end;


-++++++++++ —————————————
source files in  lima/source directly 
————+++++++++++++++++++++

file: convarp.pp

file: convdb.pp

file: convhist.pp

file: convwt.pp

file: eurox.pp

type    posrecord       = record
          _R            : Real;     { the number 52.5232323 }
          _C            : longint;  { coded pair Pcod*700+(ord(PcodA)-65)*26+ord(PcodB) }
        end;
type    posmemory       = array[0..Maxn] of posrecord;
var     LON,LAT         : ^posmemory;
        fp,x            : integer;
        pffile          : file of posrecord;
        sLON,sLAT       : real;
        sC,u            : longint;
        xptr,n,amin,amax: longint;
        ft              : text;
        Vtown,Vstreet   : packed array [1..25] of char;
        s,s1,s2,s3,s4   : string[50];


file: fix.pp

file: geocode.pp

file: lima.pp

file: limaalibicapt.pp

file: limaavensis.pp

file: limaavensiso.pp

file: limabest.pp

file: limaboek.pp

Type    SoortWachten = (_Wachten,_Lossen,_Spoelen,_Totaal,_Heen,_Terug);
        TijdRecord   = Record
          Count : Integer;
          Lading,
          Som   : LongInt;
        End;

file: limaboeko.pp

Type    SoortWachten = (_Wachten,_Lossen,_Spoelen,_Totaal,_Heen,_Terug);
        TijdRecord   = Record
          Count : Integer;
          Lading,
          Som   : LongInt;
        End;

file: limabonspool.pp

file: limabrugcapt.pp

file: limabrugcapt24.pp

file: limacalc.pp

Type    SoortWachten = (_Wachten,_Lossen,_Spoelen,_Totaal,_Heen,_Terug);
        TijdRecord   = Record
          Count : Integer;
          Lading,
          Som   : LongInt;
        End;

var     Bon     : BonRecord;
        oBonNummer      : longint;
        oRegelNummer    : integer;

        Sub     : Record
          AannemerId,
          WerkId        : LongInt;
          ReceptNummer  : Longint;

          DebNr         : Par10;
          HanNr         : Par10;
          AanZoekArg    : Par8;
          StortWijze    : Par2;
          NEWStortTempo : Integer;      {opgegeven storttempo in stort}
          XDIBISCode    : Par3;
          OvLading,
          OvRitten,
          Datum,
          Aanvang,
          BeginLossen   : Integer;
          Besteld,                      {eerste vracht          }
          Geleverd      : LongInt;      {totaal geleverd        }
          RijtijdHeen,
          RijtijdTerug,
          Ritten        : Integer;
          Tijden        : Array [SoortWachten] Of TijdRecord;
          Centrale      : char;
          Basisprijs{,
          Optieprijs}   : LongInt;
          Aannemernaam : Par25;
          Aannemerplaats : Par25;
          Aschema       : CalcArtikels;
        End;

file: limacentnbest.pp

file: limacitytrack.pp

file: limacollect.pp

file: limactrl.pp

file: limadatatrack.pp

file: limadriverreset.pp

file: limaepp.pp

file: limaevent.pp

file: limaexact.pp

Type    SoortWachten = (_Wachten,_Lossen,_Spoelen,_Totaal,_Heen,_Terug);
        TijdRecord   = Record
          Count : Integer;
          Lading,
          Som   : LongInt;
        End;

var     Bon     : BonRecord;
        oBonNummer      : longint;
        oRegelNummer    : integer;
        kpl             : string[5];


file: limaexactpp.pp

file: limaexactsk.pp

type    pushrecord = record
          tyd  : integer;
          tnum : longint;
          kent : par8;
          tonn : longint;
        end;

Type    SoortWachten = (_Wachten,_Lossen,_Spoelen,_Totaal,_Heen,_Terug);
        TijdRecord   = Record
          Count : Integer;
          Lading,
          Som   : LongInt;
        End;
file: limagpsfred.pp

file: limagpsrapport.pp

file: limagpstrace.pp

file: limaimport.pp

type
        mnp  = record
          indexid       : longint;
          glv_jaar      : longint;
          glv_jaarV     : longint;
          glv_jaarVV    : longint;
          glv_jaarVVV   : longint;
          glv_overig    : longint;
          foon          : par15;
          fax           : par15;
          Climit        : longint;
          Csaldo        : longint;
          Dpcod         : integer;
          DpcodABC      : par2;
          Dhnum         : integer;
{         Ddnum         : par10;
          Dhan          : par10;}
          Cbetaalwijze  : char;
        end; 

file: limajonker.pp

{
        WeeglijstStruc = Record
          Naampje : Packed Array [1..20] of char;
          Artikel : Packed Array [1.. 8] Of Char;
          Soort   : Integer;
          Gewicht : LongInt;
          VochtMin,
          VochtMax      : Integer;
        End;}

{       IpxStrucAskTaskRecord = Record
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : Integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer; 0..9
        End;
        IpxStrucTaskStartRecord = IpxStrucAskTaskRecord;

        WeegArray = Array [1..16] OF WeeglijstStruc;

        IpxStrucTheTaskRecord = Record
          Main          : IpxStrucAskTaskRecord;
          DoNotLoad     : byte;  0=load, 1=load&bliep, 2=no loa
          Dummy         : Byte;
          Boodschap     : Packed Array [1..120] of char;
          ReceptNaam    : Packed Array [1.. 20] Of Char;
          Weeglijst     : WeegArray;
        End; }

file: limajonkerbest.pp

type
  gewichtrecord = packed record
    gsoort              : byte;
    gbunker             : byte;
    gsequence           : integer;
    gjonkercode         : par3;
    gbeoogd,gafgewogen  : longint;
    gvocht              : integer;
    gabsorptie          : integer;
    gartikel            : par8;
    gnaampje            : string[19];
    gKOMindex           : longint;
  end;

file: limajonkerprinter.pp

file: limakorrelfact.pp

file: limametacom.pp

Type    DetailRecord   = Record
          datum    : Integer;
          subx     : byte;
          Artk     : char;
          eenh     : string[10];
          omsText  : string[120];
          aantal,stuksprijs,totaal : longint;
          nonumbers : boolean; { onderdrukken getallen }
          accent      : boolean; { vet gedrukte text }
        End;

file: limamob.pp

file: limaomzet.pp

file: limapeople.pp

file: limaplan.pp

file: limarembest.pp

file: limarover.pp

type    LocalMixRec             = Record
         mstatus                   : MixerStatusMogelijkheden;
         mcentrale                 : char;
         mdevice                   : LongInt;
         mmixer                    : integer;
{        mstarttijd                : integer;}
         moldvoice                 : Boolean;
         msoortstatuskastje        : Tristate;
        end;

file: limarovero.pp

type    LocalMixRec             = Record
         mstatus                   : MixerStatusMogelijkheden;
         mcentrale                 : char;
         mdevice                   : LongInt;
         mmixer                    : integer;
{        mstarttijd                : integer;}
         moldvoice                 : Boolean;
         msoortstatuskastje        : Tristate;
        end;

file: limaroverposreset.pp


file: limaroverwis.pp

file: limasap.pp

Type    DetailRecord   = Record
          datum    : Integer;
          subx     : byte;
          Artk     : char;
          eenh     : string[10];
          omsText  : string[120];
          aantal,stuksprijs,totaal : longint;
          nonumbers : boolean; { onderdrukken getallen }
          accent      : boolean; { vet gedrukte text }
        End;

file: limasecsato.pp

file: limasecsatserv.pp

file: limaserv.pp

file: limaslibalarm.pp

file: limastore.pp

file: limastorepdf.pp

file: limastv.pp

file: limatcpipbest.pp


file: limatcpipbesto.pp



file: limatcpiptms.pp

{       IpxStrucAskTaskRecord = Record
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : Integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer; 0..9
        End;
        IpxStrucTaskStartRecord = IpxStrucAskTaskRecord;

        WeegArray = Array [1..16] OF WeeglijstStruc;

        IpxStrucTheTaskRecord = Record
          Main          : IpxStrucAskTaskRecord;
          DoNotLoad     : byte;  0=load, 1=load&bliep, 2=no loa
          Dummy         : Byte;
          Boodschap     : Packed Array [1..120] of char;
          ReceptNaam    : Packed Array [1.. 20] Of Char;
          Weeglijst     : WeegArray;
        End; }

file: limatms.pp

{
        WeeglijstStruc = Record
          Naampje : Packed Array [1..20] of char;
          Artikel : Packed Array [1.. 8] Of Char;
          Soort   : Integer;
          Gewicht : LongInt;
          VochtMin,
          VochtMax      : Integer;
        End;}

{       IpxStrucAskTaskRecord = Record
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : Integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer; 0..9
        End;
        IpxStrucTaskStartRecord = IpxStrucAskTaskRecord;

        WeegArray = Array [1..16] OF WeeglijstStruc;

        IpxStrucTheTaskRecord = Record
          Main          : IpxStrucAskTaskRecord;
          DoNotLoad     : byte;  0=load, 1=load&bliep, 2=no loa
          Dummy         : Byte;
          Boodschap     : Packed Array [1..120] of char;
          ReceptNaam    : Packed Array [1.. 20] Of Char;
          Weeglijst     : WeegArray;
        End; }

file: limatmsold.pp

{
        WeeglijstStruc = Record
          Naampje : Packed Array [1..20] of char;
          Artikel : Packed Array [1.. 8] Of Char;
          Soort   : Integer;
          Gewicht : LongInt;
          VochtMin,
          VochtMax      : Integer;
        End;}

{       IpxStrucAskTaskRecord = Record
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : Integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer; 0..9
        End;
        IpxStrucTaskStartRecord = IpxStrucAskTaskRecord;

        WeegArray = Array [1..16] OF WeeglijstStruc;

        IpxStrucTheTaskRecord = Record
          Main          : IpxStrucAskTaskRecord;
          DoNotLoad     : byte;  0=load, 1=load&bliep, 2=no loa
          Dummy         : Byte;
          Boodschap     : Packed Array [1..120] of char;
          ReceptNaam    : Packed Array [1.. 20] Of Char;
          Weeglijst     : WeegArray;
        End; }


file: limatomtom.pp

type    LocalMixRec             = Record
         mstatus                   : MixerStatusMogelijkheden;
         mcentrale                 : char;
         mdevice                   : string[12];
         mmixer                    : integer;
         mtimestamp                : string[15];
{        mstarttijd                : integer;}
         moldvoice                 : Boolean;
         mprocessed                : Boolean;
         msoortstatuskastje        : Tristate;
        end;

file: limattybest.pp

file: limattybesto.pp

file: limattybestx.pp

file: limavbscapt.pp

file: limavbslisten.pp

file: limavbsold.pp

file: limavijfbest.pp

file: limaweegbrug.pp

file: limazaanbest.pp

{       IpxStrucAskTaskRecord = Record
          TaskNumber    : LongInt;
          Bonnummer     : LongInt;
          ReceptNummer  : LongInt;
          MixerNummer   : Integer;
          Maken         : Integer;
          OpBon         : Integer;
          MaakMethode   : Integer; 0..9
        End;
        IpxStrucTaskStartRecord = IpxStrucAskTaskRecord;

        WeegArray = Array [1..16] OF WeeglijstStruc;

        IpxStrucTheTaskRecord = Record
          Main          : IpxStrucAskTaskRecord;
          DoNotLoad     : byte;  0=load, 1=load&bliep, 2=no loa
          Dummy         : Byte;
          Boodschap     : Packed Array [1..120] of char;
          ReceptNaam    : Packed Array [1.. 20] Of Char;
          Weeglijst     : WeegArray;
        End; }

file: memtest.pp

type bigrecord = record
      q : array[0..n*1000] of array [0..1023] of byte;
     end;

file: nullen.pp

file: portspy.pp

file: rats.pp

file: recvudp.pp

file: repair_aannemer.pp

file: repair_werk.pp

{  WerkRecord = Packed Record
    UniekNr,SS1,SS2     : LongInt;   12
    AannemerId  : RecIdType;         16
    InvoerDatum : Integer;           18
    WerkBasis,XDWerkOptkill     : LongInt;              26
    Aflever     : NawRecord;    75 = 101
    
    Opmerking     : Par30;           131
    KontaktPersoon: Par15;      45   146
    
    History     : HistoryRecord;     154
    Rij         : RijArray;  36 =    190
    BouwSector  : Integer;      38   192
    Huisnummer  : Par6;              198
    PcodABC     : Par2;              200
    VOBNcode    : Integer;           202
    Korting     : Integer;           204
    RijAUTOMAAT : Char;              
    fillerchar  : Char;              206
    Pcod        : Integer;           208
    fillertje   : array[1..6] of Char;  214     tabel met rijtijden
    GSM         : par15;          
    Referentie  : par15;          244
    WerkMaxTon  : integer;        246
    KILLEDAflCode: integer;       248
    WerkMaxAssen : byte;          249
    DIBIScode   : Par3;           252
    VCertGehad  : Char;           253
    PrijsPeilDatum : integer;     255
    Filler      : Array [256..1024] Of Char;  }

file: rtm.pp

file: tcdf.pp

type
      strx      = string[strsize];
      pp6record = packed record  { A..Z,A..Z }
        town     : word;
        street   : longint;
        nummin   : word;
        nummax   : word;
        apnd     : byte;
      end;
      pp4record = packed record
        pp6      : array ['A'..'Z','A'..'Z'] of pp6record;
      end;
      pp4pointer = ^pp4record;
      townrecord = packed record
        name    : strx;
        prefix  : word;  {020, 0229 e.d. }
        pp4min,
        pp4max  : word;
        hits    : longint;
      end;

	    cacherecord = packed record
        Cname  : strx;
        Capnd  : byte;
        Cregel : longint;
        Cstreet: longint;
      end;    

file: test1.pp

file: test2.pp

file: test4.pp

file: test5.pp

type    posrecord       = record
          _R            : Real;     { the number 52.5232323 }
          _C            : longint;  { coded pair Pcod*700+(ord(PcodA)-65)*26+ord(PcodB) }
        end;

file: test7.pp

type    LocalMixRec             = Record
         mstatus                   : MixerStatusMogelijkheden;
         mcentrale                 : char;
         mdevice                   : LongInt;
         mmixer                    : integer;
         mstarttijd                : integer;
         moldvoice                 : Boolean;
         mstatusmeldkastjeaanwezig : Boolean;
        end;

file: test8.pp

file: test9.pp

file: testa.pp

file: testb.pp

file: tpc.pp

type    posrecord       = packed record
          _R            : Real;     { the number 52.5232323 }
          _C            : longint;  { coded pair Pcod*700+(ord(PcodA)-65)*26+ord(PcodB) }
        end;
        posmemory       = array[0..Maxn] of posrecord;
      strx      = string[strsize];
      pp6record = packed record  { A..Z,A..Z }
        town     : word;
        street   : longint;
        nummin   : word;
        nummax   : word;
        apnd     : byte;
        isodd    : boolean;
      end;
      pp4record = packed record
        pp6      : array ['A'..'Z','A'..'Z'] of pp6record;
      end;
      pp4pointer = ^pp4record;
      townrecord = packed record
        name    : strx;
        pp4min,
        pp4max  : word;
        hits    : longint;
      end;     
      cacherecord = packed record
        Cname  : strx;
        Capnd  : byte;
        Cregel : longint;
        Cstreet: longint;
      end;
   
file: uncsv.pp

file: untab.pp

file: whipi.pp

file: xmudp.pp

